# -*- coding: utf-8 -*-
"""FDS_Project_LearnerNotebook_FullCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Aec8N6tUGI9UYT8KJU3QgGSVFNjwRpNF

# FoodHub Data Analysis

### Context

The number of restaurants in New York is increasing day by day. Lots of students and busy professionals rely on those restaurants due to their hectic lifestyles. Online food delivery service is a great option for them. It provides them with good food from their favorite restaurants. A food aggregator company FoodHub offers access to multiple restaurants through a single smartphone app.

The app allows the restaurants to receive a direct online order from a customer. The app assigns a delivery person from the company to pick up the order after it is confirmed by the restaurant. The delivery person then uses the map to reach the restaurant and waits for the food package. Once the food package is handed over to the delivery person, he/she confirms the pick-up in the app and travels to the customer's location to deliver the food. The delivery person confirms the drop-off in the app after delivering the food package to the customer. The customer can rate the order in the app. The food aggregator earns money by collecting a fixed margin of the delivery order from the restaurants.

### Objective

The food aggregator company has stored the data of the different orders made by the registered customers in their online portal. They want to analyze the data to get a fair idea about the demand of different restaurants which will help them in enhancing their customer experience. Suppose you are hired as a Data Scientist in this company and the Data Science team has shared some of the key questions that need to be answered. Perform the data analysis to find answers to these questions that will help the company to improve the business.

### Data Description

The data contains the different data related to a food order. The detailed data dictionary is given below.

### Data Dictionary

* order_id: Unique ID of the order
* customer_id: ID of the customer who ordered the food
* restaurant_name: Name of the restaurant
* cuisine_type: Cuisine ordered by the customer
* cost: Cost of the order
* day_of_the_week: Indicates whether the order is placed on a weekday or weekend (The weekday is from Monday to Friday and the weekend is Saturday and Sunday)
* rating: Rating given by the customer out of 5
* food_preparation_time: Time (in minutes) taken by the restaurant to prepare the food. This is calculated by taking the difference between the timestamps of the restaurant's order confirmation and the delivery person's pick-up confirmation.
* delivery_time: Time (in minutes) taken by the delivery person to deliver the food package. This is calculated by taking the difference between the timestamps of the delivery person's pick-up confirmation and drop-off information

### Importing the required libraries
"""

# import libraries for data manipulation
import numpy as np
import pandas as pd

# import libraries for data visualization
import matplotlib.pyplot as plt
import seaborn as sns

"""### Understanding the structure of the data"""

from google.colab import drive
drive.mount('/content/drive')

# read the data
df = pd.read_csv('/content/drive/MyDrive/foodhub_order.csv')
# returns the first 5 rows
df.head()

"""#### Observations:

The DataFrame has 9 columns as mentioned in the Data Dictionary. Data in each row corresponds to the order placed by a customer.
"""

# Get data dimensions
df.shape

"""#### Observations: The data has 1898 rows and 9 columns, meaning there are 1898 total orders recorded in the dataset, each with 9 corresponding features.

"""

# Use info() to print a concise summary of the DataFrame
df.info()

"""#### Observations: This dataset has three different datatypes for the columns, which are int64 (for integer variables), float64 (for decimal variables, specifically the cost in this case) and object (for categorical variables). There is 1 floating point variable, 4 integer variables and 4 categorical variables.

"""

# Check for the total number of null entries in each column of the dataset
df.isnull().sum()

# Check rating column to see "Not Given" values
df['rating'].value_counts()

# Plot distribution of ratings
rating_data = df[df['rating'] != 'Not given']
sns.countplot(data = rating_data, x = 'rating')
plt.title('Distribution of Ratings')
plt.show()

"""The distribution of ratings (when ordered from least to greatest) is clearly not normally distributed, thus we cannot use the mean to replace the missing rating values. Instead, we should use the median or mode. Although this column appears as categorical data in the dataset, it is actually numerical in nature, thus we should use the median to replace the missing ratings, not the mode (although they are equal in this case)."""

# Converting all non 'Not given' values to ints
df[df['rating'] != 'Not given']['rating'] = df[df['rating'] != 'Not given']['rating'].astype(int)
# Replace all 'Not given' values with the median of the rest of the ratings
df['rating'] = df['rating'].replace(['Not given'],df[df['rating'] != 'Not given']['rating'].median())
# Ensure entire column is ints
df['rating'] = df['rating'].astype(int)
df['rating'].value_counts()

"""#### Observations: This dataset has 736 missing ratings, which were treated by replacing them with the median rating of 5. Since we aren't sure what these ratings would be, the other option would be to not use the orders whose ratings were not given, but that would remove a large portion of the data (almost 40%), which lead to certain relationships in the data being hidden. Thus, the missing values were imputed with the median rating.

"""

# Get basic statistical descriptive data on all 5 numerical columns
df.describe()

"""#### Observations: The minimum food preparation time in this dataset is 20 minutes, the average food preparation time is about 27.37 minutes, and the maximum food preparation time is 35 minutes.

"""

# Counts of the different types of values in the Rating Column
df['rating'].value_counts()

"""#### Observations: In this dataset, there were originally 736 orders not rated, but they were considered as missing values and subsequently treated in Question 3, so now there are 0 orders not rated.

### Exploratory Data Analysis (EDA)

### Univariate Analysis
"""

# Plotting Histograms for the Numerical variables
sns.histplot(data=df,x='cost_of_the_order',stat='density')
plt.show()
sns.histplot(data=df,x='food_preparation_time',stat='density')
plt.show()
sns.histplot(data=df,x='delivery_time',stat='density')
plt.show()

"""Order cost in this dataset seems to have a right-skew with a single peak at about 11 to 12 dollars. Costs range from about 5 to 35 dollars. Food preparation time in this dataset seems to be more evenly distributed while being multi-modal with peaks at about 20-21 minutes, 25-26 minutes, 30-31 minutes and 34-35 minutes. Times range from about 20 to 35 minutes. Food delivery time in this dataset seems to have a slight left-skew with a peaks at about 15-16 minutes, 19-20 minutes, 24-25 minutes, and 28-29 minutes. Times range from about 15 to 33 minutes."""

# Countplots for Rating and categorical variables
sns.countplot(data=df,x='rating')
plt.show()
sns.countplot(data=df,x='day_of_the_week')
plt.show()
sns.countplot(data=df,x='cuisine_type')
plt.xticks(rotation=90)
plt.show()

"""For rating, after accounting for missing values, it is clearly left-skewed with a peak at 5, with ratings ranging from 3 to 5. There are more than double the weekend orders compared to weekday orders. American, Japanese, Italian and Chinese cuisines received the most orders, with the rest of the cuisines receiving less than 100 orders."""

# Boxplot for all 4 numerical variables
sns.boxplot(data=df,x=df['cost_of_the_order'])
plt.show()
sns.boxplot(data=df,x=df['food_preparation_time'])
plt.show()
sns.boxplot(data=df,x=df['delivery_time'])
plt.show()
sns.boxplot(data=df,x=df['rating'])
plt.show()

"""The boxplots for the four numerical variables support the skewness or lack of skewness and range seen in the histogram distributions. The median order cost seems to be around $14, the median food preparation time is about 27 minutes  the median delivery time is about 25 minutes, and the median rating is 5. None of the variables appear to have any outliers."""

# Get counts of orders for each restaurant ranked from greatest to least
df['restaurant_name'].value_counts()

"""#### Observations: The top 5 restaurants in terms of orders received are Shake Shack, The Meatball Shop, Blue Ribbon Sushi, Blue Ribbon Fried Chicken, and Parm.

"""

# Filter to just weekend orders and see how many orders were for each cuisine
df[df['day_of_the_week']=='Weekend']['cuisine_type'].value_counts()

"""#### Observations: The most popular cusine on weekends is American, with the most number of orders received at 415.

"""

# Count of orders that cost more than 20 dollars divided by total orders
df[df['cost_of_the_order']>20].shape[0]/df.shape[0]*100

"""#### Observations: About 29.24% of the orders in this dataset cost more than 20 dollars.

"""

# Access delivery time column and compute mean
df['delivery_time'].mean()

"""#### Observations: The mean order delivery time is about 24.16 minutes.

"""

# Get counts of orders for each customer ranked from greatest to least
df['customer_id'].value_counts()

"""#### Observations: Customer 52832 is the most frequent customer with 13 orders, followed by Customer 47440 with 10 orders, and finally Customer 83287 with 9 orders.

### Multivariate Analysis
"""

# Creating Pairplot for Order Cost, Food Prep Time and Delivery Time
g = sns.pairplot(data = df[['cost_of_the_order','food_preparation_time', 'delivery_time']])
g.fig.suptitle('Pairplot of Order Cost, Food Preparation Time, and Delivery Time', y = 1.03)
plt.show()

# Creating Correlation Matrix for Order Cost, Food Prep Time, and Delivery Time
corr_matrix = df[['cost_of_the_order','food_preparation_time', 'delivery_time']].corr()
sns.heatmap(corr_matrix, annot = True)
plt.title('Correlation Matrix of Order Cost, Food Preparation Time, and Delivery Time')
plt.show()

"""The pairplot of order cost, food preparation time, and delivery time shows almost no noticeable relationships between any pair of these three features, indicating that they are likely independent of each other. This is further supported by the heatmap above show correlation values all very close to zero. This means that the three key numerical variables are independent of each other, and we can move forward investigating their relationships with the categorical variables in the dataset without worrying about any relationship with the other numerical variables."""

# Violin Plots to Investigate Order Cost vs Rating and Order Cost vs Day of Order
sns.violinplot(data = df, x = 'rating', y = 'cost_of_the_order')
plt.title('Distribution of Order Cost for Various Order Ratings')
plt.show()
sns.violinplot(data = df, x = 'day_of_the_week', y = 'cost_of_the_order')
plt.title('Distribution of Order Cost depending on the Day of the Order')
plt.show()

"""The distribution of order cost, as shown in the violin plot, appears to stay consistent when separated by rating in terms of shape (right-skewed), median, range and interquartile range. The orders rated 5 seem to have costs more concentrated around the median, but the consistencies in every other aspect of the distributions don't support this as a trend. Similarly, the distribution of cost for orders on the weekend seems to be very similar to that of on weekdays in terms of shape (right-skewed), median, range and interquartile range. Therefore, based on the data, it seems that the cost of the order does not seem to be heavily correlated to the order rating or the day the order is received, which makes sense considering costs usually stay consistent at a restaurant regardless of the day, and ratings are provided after the food is paid for."""

# Violin Plots to Investigate Food Prep Time vs Rating and Food Prep Time vs Day of Order
sns.violinplot(data = df, x = 'rating', y = 'food_preparation_time')
plt.title('Distribution of Food Preparation Time for Various Order Ratings')
plt.show()
plt.title('Distribution of Food Preparation Time depending on the Day of the Order')
sns.violinplot(data = df, x = 'day_of_the_week', y = 'food_preparation_time')
plt.show()

"""Analyzing the distribution of food preparation time grouped by rating and then day of the week, as shown in the violin plot, yields essentially the same results as the previous analysis in that the distributions stay consistent over different ratings and between weekend and weekday. The only difference is that these distributions are more uniform compared to the order cost distributions. The food preparation time distribution for weekdays is slightly more right-skewed than that for weekends, possibly suggesting that weekday orders tend to take less time to prepare. However, the differences in the plots aren't stark enough to strongly support this trend, so we can come to the same conclusion that the rating and day of the order seem to have little correlation with the food preparation time for the order."""

# Violin Plots to Investigate Delivery Time vs Rating and Delivery Time vs Day of Order
sns.violinplot(data = df, x = 'rating', y = 'delivery_time')
plt.title('Distribution of Delivery Time for Various Order Ratings')
plt.show()
sns.violinplot(data = df, x = 'day_of_the_week', y = 'delivery_time')
plt.title('Distribution of Delivery Time depending on the Day of the Order')
plt.show()

"""The distributions of order delivery time over various ratings, as shown in the violin plot, seems to become slightly less left-skewed for higher ratings, although the orders rated 4 have the highest density at the lower delivery times. The difference is not enough to support any kind of trend. For day of the week, delivery time for the weekend has a considerably larger range than that of weekday, and the median delivery time for weekday orders is about 5 to 6 minutes longer than that of weekend orders. This strongly suggests that weekday orders may tend to have greater delivery times overall compared to weekend orders."""

# Barplot for Order Cost vs Cuisine Type
sns.barplot(data = df, x = 'cuisine_type', y = 'cost_of_the_order')
plt.xticks(rotation=90)
plt.title('Average Order Cost for Different Cuisine Types')
plt.show()

"""Order cost seems to vary somewhat with cuisine, with French having the highest average cost, followed closely by Middle Eastern, Thai, Southern and Spanish. This could mean that these cuisines tend to be more expensive.

"""

# Barplot for Food Prep Time vs Cuisine Type
sns.barplot(data = df, x = 'cuisine_type', y = 'food_preparation_time')
plt.xticks(rotation=90)
plt.title('Average Food Preparation Time for Different Cuisine Types')
plt.show()

"""The mean food preparation times for the different cuisines in this dataset seems to be almost uniformly distributed, indicating that food preparation time is not heavily related to cuisine."""

# Barplot for Delivery Time vs Cuisine Type
sns.barplot(data = df, x = 'cuisine_type', y = 'delivery_time')
plt.xticks(rotation=90)
plt.title('Average Delivery Time for Different Cuisine Types')
plt.show()

"""The average delivery time seems to vary little between different cuisines, with Vietnamese orders having the longest delivery time by a small margin and Korean orders having the shortest delivery time by a more noticeable margin. It is  unlikely that delivery time and cuisine are closely related."""

# Filter restaurants with a rating count of more than 50
rating_counts = df.groupby('restaurant_name')['rating'].count()
filtered_restaurants = rating_counts[rating_counts > 50].index
filtered_restaurants

# Calculate the average rating of the filtered restaurants
avg_ratings = df[df['restaurant_name'].isin(filtered_restaurants)].groupby('restaurant_name')['rating'].mean()
avg_ratings

# Filter restaurants with an average rating greater than 4
promotional_restaurants = avg_ratings[avg_ratings > 4].index
promotional_restaurants

"""#### Observations: Blue Ribbon Fried Chicken, Blue Ribbon Sushi, Parm, RedFarm Broadway, RedFarm Hudson, Shake Shack, and The Meatball Shop all fulfill the criteria to get the promotional offer. Since the missing rating values were replaced with 5's, it is important to note that the average ratings for some of these restaurants may have been boosted.

"""

# Write the code here
# Find orders more than $20 and those between $5 and $20, apply percent charges accordingly and add
df[df['cost_of_the_order']>20]['cost_of_the_order'].sum()*0.25 + df[df['cost_of_the_order']>5][df['cost_of_the_order']<=20]['cost_of_the_order'].sum()*0.15

"""#### Observations: The company net revenue across all orders is about $6166.30.

"""

# Write the code here
# Count of orders that take more than 60 minutes (adding prep and delivery time together) divided by total orders
df[df['food_preparation_time'] + df['delivery_time'] > 60].shape[0]/df.shape[0]*100

"""#### Observations: About 10.54% of the orders take more than 60 minutes to get delivered from the time the order is placed.

"""

# Write the code here
# Filter to just weekday orders and calcuate mean delivery time
print("Mean Delivery Time for Weekday order (minutes): " + str(df[df['day_of_the_week'] == 'Weekday']['delivery_time'].mean()))
# Filter to just weekend orders and calcuate mean delivery time
print("Mean Delivery Time for Weekend orders (minutes): " + str(df[df['day_of_the_week'] == 'Weekend']['delivery_time'].mean()))

"""#### Observations: The mean delivery time on weekdays is about 6 minutes longer than the mean delivery time on weekends.

### Conclusion and Recommendations

### Conclusions:
*  The analysis of FoodHub's order data reveals several key insights, as well as potential trends and relationships. Order costs are generally right-skewed, with most orders falling around 11-12 dollars and ranging from 5 to 35 dollars. These costs remain consistent regardless of customer ratings or whether the order is placed on a weekday or weekend, indicating that pricing strategies are uniform across these variables. Food preparation times are more evenly distributed than order costs and show multiple peaks but also do not vary significantly based on ratings or the day the order is placed. Delivery times exhibit slight variations, with noticeably longer (about 5 to 6 minutes) and more variable times on weekdays compared to weekends. Interestingly, the data shows that the average cost and delivery times for different cuisines vary, with French, Middle Eastern, Thai, Southern, and Spanish cuisines tending to be more expensive, Vietnamese tending to take longer to deliver, and Korean tending to take less time to deliver.

### Recommendations:

*  FoodHub should emphasize optimizing delivery times, specifically on weekdays where delivery tends to take longer. Implementing more efficient delivery routes, increasing the number of delivery workers during peak hours, and using predictive analytics to forecast demand can help address this issue. Also, higher-cost cuisines like French and Middle Eastern generate more revenue, so advertising that promote these cuisines can further boost profitability. Enhancing the customer experience by promoting high ratings through loyalty programs and discounts will lead to repeat business. Also, addressing the longer delivery times for specific cuisines, such as Vietnamese, by identifying and mitigating underlying causes will improve overall service efficiency. Finally, encouraging more customer feedback through engaging and rewarding mechanisms like surveys and a point system will provide valuable insights for continuous improvement.

By adopting these strategies, FoodHub can enhance customer satisfaction, streamline operations, and increase revenue and efficiency, thereby strengthening its position in the food delivery market.

---
"""